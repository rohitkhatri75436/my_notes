--SAMPLE DATABASE DOWNLOAD LINKE--
https://sample-videos.com/download-sample-sql.php

-- SQL OPERATIONS --

-- Fetch all data from sql database --
-- 'SELECT' > select data from a database
-- '*' > Retrieve all columns (shorthand for selecting every column)
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'Customers' > The specific table that contains the data we want to select
-- ';' > Statement terminator, indicating the end of the SQL query

SELECT * FROM Customers;
---------------------------------------------------------------------------------------------------------

-- USE DISTINCT KEYWORD:
-- 'SELECT' > select data from a database
-- 'Distinct' > return only unique values, eliminating duplicates ***
-- 'Country' > specify the column(s) to retrieve data from
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'Customers' > The specific table that contains the data we want to select
-- ';' > Statement terminator, indicating the end of the SQL query

SELECT Distinct Country FROM Customers ;
---------------------------------------------------------------------------------------------------------

-- USE COLUMN NAMES INSTEAD OF '*' :
-- 'SELECT' > select data from a database
-- 'CustomerName' > specify the column(s) to retrieve data from ***
-- 'PostalCode' > specify the column(s) to retrieve data from
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'Customers' > The specific table that contains the data we want to select
-- ';' > Statement terminator, indicating the end of the SQL query

SELECT CustomerName,PostalCode FROM Customers;
---------------------------------------------------------------------------------------------------------

-- WHERE CONDITION FOR NOT EQUAL (<>) SAME AS "!=" :
-- 'SELECT' > select data from a database
-- '*' > Retrieve all columns (shorthand for selecting every column)
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'Products' > The specific table that contains the data we want to select
-- 'WHERE' > Specify the condition(s) for which rows to include in the results
-- 'Price' > The column to apply the condition to
-- '<>' > Not equal to, returns rows where the value is not equal to the specified value ***
-- '18' > The value to compare against
-- ';' > Statement terminator, indicating the end of the SQL query

SELECT * FROM Products WHERE Price <> 18;
---------------------------------------------------------------------------------------------------------

-- USE OF "BETWEEN" AND "AND" KEYWORD
-- 'SELECT' > select data from a database
-- '*' > Retrieve all columns (shorthand for selecting every column)
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'Customers' > The specific table that contains the data we want to select
-- 'WHERE' > Specify the condition(s) for which rows to include in the results
-- 'CustomerID' > The column to apply the condition to
-- 'BETWEEN' > Select values within a given range ***
-- '2' > The lower bound of the range (inclusive)
-- 'AND' > Used to specify the upper bound of the range ***
-- '6' > The upper bound of the range (inclusive)
-- ';' > Statement terminator, indicating the end of the SQL query

SELECT * FROM Customers WHERE CustomerID BETWEEN 2 AND 6;
---------------------------------------------------------------------------------------------------------

-- SEARCH FOR A PATTERN (USING LIKE KEYWORD) --

-- USE "LIKE" KEYWORD TO FIND RESULT AS LIKE "CONTAINS" FUNCTIONALITY, THE "BER%" MEANS FIND WORDS WHICH STARTS FROM "BER" AND FOR "%LIN" MEANS FIND WORDS ENDS ON "LIN". ITS MEAN THE "%" COVERING REMAIN CHARACTERS
-- 'SELECT' > select data from a database
-- '*' > Retrieve all columns (shorthand for selecting every column)
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'Customers' > The specific table that contains the data we want to select
-- 'WHERE' > Specify the condition(s) for which rows to include in the results
-- 'City' > The column to apply the condition to
-- 'LIKE' > Used to search for a specified pattern in a column ***
-- 'Ber%' > Find words that start with "Ber" (the "%" covers the remaining characters) ***
-- ';' > Statement terminator, indicating the end of the SQL query
--------------------------------OR--------------------------------
SELECT * FROM Customers WHERE City LIKE 'Ber%';

-- 'SELECT' > select data from a database
-- '*' > Retrieve all columns (shorthand for selecting every column)
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'Customers' > The specific table that contains the data we want to select
-- 'WHERE' > Specify the condition(s) for which rows to include in the results
-- 'City' > The column to apply the condition to
-- 'LIKE' > Used to search for a specified pattern in a column ***
-- '%lin' > Find words that end with "lin" (the "%" covers the preceding characters) ***
-- ';' > Statement terminator, indicating the end of the SQL query

SELECT * FROM Customers WHERE City LIKE '%lin';
---------------------------------------------------------------------------------------------------------

-- USE 'IN' KEYWORD TO FIND IF THE VALUES(ROWS) CONTAINS VALUE IN GIVEN LIST OR TUPPLE (IN CONTEXT OF PYTHON)
-- 'SELECT' > select data from a database
-- '*' > Retrieve all columns (shorthand for selecting every column)
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'customers' > The specific table that contains the data we want to select
-- 'WHERE' > Specify the condition(s) for which rows to include in the results
-- 'Country' > The column to apply the condition to
-- 'IN' > Used to specify multiple values to search for in the column ***
-- '(' > Start of the list of values to search for
-- 'uk','mexico', 'germany' > The list of values to search for (separated by commas)
-- ')' > End of the list of values to search for
-- ';' > Statement terminator, indicating the end of the SQL query

SELECT * FROM customers WHERE Country IN ('uk','mexico', 'germany');
---------------------------------------------------------------------------------------------------------

-- USE "ORDER BY" KEYWORD TO SORT A LIST ACCORDING TO COLUMN AND SORT TYPE (AFTER COLUMN) > "ASC|DESC" ("ASC" TO SORT ASCENDING ORDER AND "DESC" TO DESCENDING ORDER.
-- 'SELECT' > select data from a database
-- '*' > Retrieve all columns (shorthand for selecting every column)
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'customers' > The specific table that contains the data we want to select
-- 'ORDER BY' > Used to sort the result set in ascending or descending order ***
-- 'country' > The column to sort on
-- 'DESC' > Sort the result set in descending order ***
-- ';' > Statement terminator, indicating the end of the SQL query

SELECT * FROM customers ORDER BY country DESC;

---------------------------------------------------------------------------------------------------------

-- USE "AND"/"OR" KEYWORD TO USE MULTIPLE CONDITIONS, YOU CAN ALSO WRITE MULTIPLE CONDITIONS IN BREAKETS LIKE BELOW
-- 'SELECT' > select data from a database
-- '*' > Retrieve all columns (shorthand for selecting every column)
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'Customers' > The specific table that contains the data we want to select
-- 'WHERE' > Specify the condition(s) for which rows to include in the results
-- 'CustomerName' > The column to apply the first condition to
-- 'LIKE' > Used to search for a specified pattern in a column
-- 'A%' > Find words that start with "A" (the "%" covers the remaining characters)
-- 'AND' > Used to combine multiple conditions ***
-- 'CustomerID' > The column to apply the second condition to
-- 'BETWEEN' > Select values within a given range
-- '1' > The lower bound of the range (inclusive)
-- 'AND' > Used to specify the upper bound of the range
-- '2' > The upper bound of the range (inclusive)
-- ';' > Statement terminator, indicating the end of the SQL query

SELECT * FROM Customers Where CustomerName like "A%" and (CustomerID between 1 and 2 OR CustomerID between 6 and 10);

---------------------------------------------------------------------------------------------------------
-- USE OF "NOT" BEFORE CONDITION TO GET THE OPPOSITE RESULT OF CONDITION AS LIKE ((!FALSE) == TRUE)
-- 'SELECT' > select data from a database
-- '*' > Retrieve all columns (shorthand for selecting every column)
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'employees' > The specific table that contains the data we want to select
-- 'WHERE' > Specify the condition(s) for which rows to include in the results
-- 'NOT' > Used to negate the result of the following condition ***
-- 'EmployeeID' > The column to apply the first condition to
-- '=' > Equal to, returns rows where the value is equal to the specified value
-- '9' > The value to compare against
-- 'AND' > Used to combine multiple conditions ***
-- '(' > Start of the group of conditions
-- 'OR' > Used to specify an alternative condition ***
-- 'Lastname' > The column to apply the second condition to
-- 'LIKE' > Used to search for a specified pattern in a column
-- 'D%' > Find words that start with "D" (the "%" covers the remaining characters)
-- 'LIKE' > Used to search for a specified pattern in a column
-- 'F%' > Find words that start with "F" (the "%" covers the remaining characters)
-- ')' > End of the group of conditions
-- ';' > Statement terminator, indicating the end of the SQL query

Select * from employees where not EmployeeID=9 AND (Lastname Like "D%" OR Lastname Like "F%");

---------------------------------------------------------------------------------------------------------
-- USE "GROUP BY" KEYWORDS TO GROUP VALUES(ROWS'S VALUES) AND CAN ALSO SORT IT BY ORDER USING "ORDER BY". AND YOU CAN ALSO USE ALIAS USING "AS" KEYWORD.
-- 'SELECT' > select data from a database
-- 'COUNT' > Used to count the number of rows that match the specified condition
-- 'CustomerID' > The column to count
-- 'AS' > Used to give an alias to the column ***
-- 'COUNTS' > The alias for the COUNT column
-- 'Country' > The column to group by
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'Customers' > The specific table that contains the data we want to select
-- 'GROUP BY' > Used to group the result set by one or more columns ***
-- 'Country' > The column to group by
-- 'ORDER BY' > Used to sort the result set in ascending or descending order ***
-- 'COUNT(CustomerID)' > The column to sort on
-- 'DESC' > Sort the result set in descending order ***
-- ';' > Statement terminator, indicating the end of the SQL query

SELECT COUNT(CustomerID) as COUNTS, Country FROM Customers GROUP BY Country  Order By COUNT(CustomerID) DESC;
NOTE: in above example we get the count of all indidual country. 

---------------------------------------------------------------------------------------------------------

-- TO DUPLICATE AN OLD TABLE STRUCTURE :
-- 'CREATE TABLE' > Create a new table in the database
-- 'CustomerTest' > The name of the new table to be created ***
-- 'LIKE' > Duplicate the structure of an existing table
-- 'customers' > The name of the existing table to duplicate the structure from ***
-- ';' > Statement terminator, indicating the end of the SQL query

CREATE TABLE CustomerTest LIKE customers;

---------------------------------------------------------------------------------------------------------
-- INNER JOIN TWO TABLE'S ROWS USING "INNER JOIN" AND "ON" KEYWORD WITH CONDITION
-- 'SELECT' > select data from a database
-- 'orderid' > The column to select from the "orders" table
-- 'orders.customerId' > The column to select from the "orders" table
-- 'customerName' > The column to select from the "Customers" table
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'orders' > The first table to join
-- 'INNER JOIN' > Used to combine rows from two or more tables based on a related column ***
-- 'Customers' > The second table to join
-- 'ON' > Used to specify the condition for joining the tables ***
-- 'orders.customerId' > The column to join on from the "orders" table
-- '=' > Equal to, returns rows where the value is equal to the specified value
-- 'customers.customerId' > The column to join on from the "Customers" table
-- ';' > Statement terminator, indicating the end of the SQL query

Select orderid, orders.customerId, customerName from orders inner join Customers on orders.customerId = customers.customerId;

NOTE : joins works like (first table's value's count x second table's value's count) so if in first table there is seven times "1" and in second table there is five times "1" then in the result table there will be 7x5 = 32 times "1".


---------------------------------------------------------------------------------------------------------
-- USING CTE TABLES (TEMPORARY TABLES) YOU CAN TEMPORARY CUSTOM TABLE DATA
-- 'WITH' > Used to define a temporary result set, also known as a Common Table Expression (CTE) ***
--'my_cte' > The name of the CTE
-- 'AS' > Used to define the CTE
-- '(' > Start of the CTE definition
-- 'SELECT' > Select data from a database
-- 'customerName' > The column to select from the "customers" table
-- 'address' > The column to select from the "customers" table
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'customers' > The table to select from
-- ')' > End of the CTE definition
-- 'SELECT' > Select data from the CTE
-- '*' > Retrieve all columns (shorthand for selecting every column)
-- 'FROM' > Specify the table(s) from which to retrieve data
--'my_cte' > The CTE to select from
-- ';' > Statement terminator, indicating the end of the SQL query

WITH my_cte AS (SELECT customerName,address from customers) SELECT * FROM my_cte;

-- USE COMPLEX CTE TABLE
-- 'WITH' > Used to define a temporary result set, also known as a Common Table Expression (CTE) ***
--'my_cte' > The name of the CTE
-- 'AS' > Used to define the CTE
-- '(' > Start of the CTE definition
-- 'SELECT' > Select data from a database
-- 'od.orderid' > The column to select from the "orders" table
-- 'cs.customerName' > The column to select from the "customers" table
-- 'cs.address' > The column to select from the "customers" table
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'orders' > The first table to join, aliased as "od"
-- 'INNER JOIN' > Used to combine rows from two or more tables based on a related column ***
-- 'customers' > The second table to join, aliased as "cs"
-- 'ON' > Used to specify the condition for joining the tables ***
-- 'od.CustomerID' > The column to join on from the "orders" table
-- '=' > Equal to, returns rows where the value is equal to the specified value
-- 'cs.CustomerID' > The column to join on from the "customers" table
-- ')' > End of the CTE definition
-- 'SELECT' > Select data from the CTE
-- '*' > Retrieve all columns (shorthand for selecting every column)
-- 'FROM' > Specify the table(s) from which to retrieve data
--'my_cte' > The CTE to select from
-- ';' > Statement terminator, indicating the end of the SQL query

WITH my_cte AS (SELECT od.orderid, cs.customerName,cs.address from orders od INNER join customers cs on od.CustomerID=cs.CustomerID) SELECT * FROM my_cte

---------------------------------------------------------------------------------------------------------

-- STORE PROCEDURE : SAVE A QUERY/FUNCTION TO USE IT LATER 
-- 'DELIMITER' > Used to change the delimiter from the default semicolon (;) to a new delimiter (//) ***
-- 'CREATE PROCEDURE' > Used to create a stored procedure ***
-- 'GetCustomers' > The name of the stored procedure
-- '(' > Start of the parameter list (in this case, no parameters)
-- ')' > End of the parameter list
-- 'BEGIN' > Start of the procedure body
-- 'SELECT' > select data from a database
-- '*' > Retrieve all columns (shorthand for selecting every column)
-- 'FROM' > Specify the table(s) from which to retrieve data
-- 'customers' > The table to select data from
-- 'END' > End of the procedure body
-- '//' > The new delimiter, used to terminate the procedure definition
-- 'DELIMITER' > Used to reset the delimiter to the default semicolon (;)
-- ';' > Statement terminator, indicating the end of the SQL query

QUERY: 
DELIMITER //
CREATE PROCEDURE GetCustomers()
BEGIN
SELECT * FROM customers;
END //
DELIMITER ;

TO USE IT : "CALL GetCustomers"
NOTE : IN ABOVE LINE USE "CALL" KEYWORD TO USE A PROCEDURE
